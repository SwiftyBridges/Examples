// Generated by SwiftyBridges. DO NOT MODIFY!

import SwiftyBridges
import Vapor

extension LoginAPI {
    static let remotelyCallableMethods: [AnyAPIMethod<LoginAPI>] = [
        AnyAPIMethod(method: Call_hello__String.self),
        AnyAPIMethod(method: Call_registerUser_username_String_password_String_confirmPassword_String.self),
        AnyAPIMethod(method: Call_logIn_username_String_password_String.self),
    ]

    private struct Call_hello__String: APIMethodCall {
        typealias API = LoginAPI
        typealias ReturnType = String

        static let methodID: APIMethodID = "hello(_: String) -> String"

        var parameter0: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0"
        }

        func call(on api: API) throws -> EventLoopFuture<String> {
            api.request.eventLoop.future(
            api.hello(
                parameter0
            )
            )
        }
    }

    private struct Call_registerUser_username_String_password_String_confirmPassword_String: APIMethodCall {
        typealias API = LoginAPI
        typealias ReturnType = String

        static let methodID: APIMethodID = "registerUser(username: String, password: String, confirmPassword: String) -> String"

        var parameter0: String
        var parameter1: String
        var parameter2: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_username"
            case parameter1 = "1_password"
            case parameter2 = "2_confirmPassword"
        }

        func call(on api: API) throws -> EventLoopFuture<String> {
            try api.registerUser(
                username: parameter0,
                password: parameter1,
                confirmPassword: parameter2
            )
        }
    }

    private struct Call_logIn_username_String_password_String: APIMethodCall {
        typealias API = LoginAPI
        typealias ReturnType = String

        static let methodID: APIMethodID = "logIn(username: String, password: String) -> String"

        var parameter0: String
        var parameter1: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_username"
            case parameter1 = "1_password"
        }

        func call(on api: API) throws -> EventLoopFuture<String> {
            try api.logIn(
                username: parameter0,
                password: parameter1
            )
        }
    }

}

extension IceCreamAPI {
    static let remotelyCallableMethods: [AnyAPIMethod<IceCreamAPI>] = [
        AnyAPIMethod(method: Call_getAllFlavors_.self),
        AnyAPIMethod(method: Call_add_flavorWithName_String.self),
        AnyAPIMethod(method: Call_delete_flavorWithID_UUID.self),
    ]

    private struct Call_getAllFlavors_: APIMethodCall {
        typealias API = IceCreamAPI
        typealias ReturnType = [IceCreamFlavor]

        static let methodID: APIMethodID = "getAllFlavors() -> [IceCreamFlavor]"

        func call(on api: API) throws -> EventLoopFuture<[IceCreamFlavor]> {
            api.getAllFlavors(
            )
        }
    }

    private struct Call_add_flavorWithName_String: APIMethodCall {
        typealias API = IceCreamAPI
        typealias ReturnType = NoReturnValue

        static let methodID: APIMethodID = "add(flavorWithName: String) -> Void"

        var parameter0: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithName"
        }

        func call(on api: API) throws -> EventLoopFuture<NoReturnValue> {
            api.add(
                flavorWithName: parameter0
            )
            .map { NoReturnValue() }
        }
    }

    private struct Call_delete_flavorWithID_UUID: APIMethodCall {
        typealias API = IceCreamAPI
        typealias ReturnType = NoReturnValue

        static let methodID: APIMethodID = "delete(flavorWithID: UUID) -> Void"

        var parameter0: UUID

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithID"
        }

        func call(on api: API) throws -> EventLoopFuture<NoReturnValue> {
            api.delete(
                flavorWithID: parameter0
            )
            .map { NoReturnValue() }
        }
    }

}

extension AlternativeIceCreamAPI {
    static let remotelyCallableMethods: [AnyAPIMethod<AlternativeIceCreamAPI>] = [
        AnyAPIMethod(method: Call_getAllFlavors_.self),
        AnyAPIMethod(method: Call_add_flavorWithName_String.self),
        AnyAPIMethod(method: Call_delete_flavorWithID_UUID.self),
    ]

    private struct Call_getAllFlavors_: APIMethodCall {
        typealias API = AlternativeIceCreamAPI
        typealias ReturnType = [IceCreamFlavor]

        static let methodID: APIMethodID = "getAllFlavors() -> [IceCreamFlavor]"

        func call(on api: API) throws -> EventLoopFuture<[IceCreamFlavor]> {
            try api.getAllFlavors(
            )
        }
    }

    private struct Call_add_flavorWithName_String: APIMethodCall {
        typealias API = AlternativeIceCreamAPI
        typealias ReturnType = NoReturnValue

        static let methodID: APIMethodID = "add(flavorWithName: String) -> Void"

        var parameter0: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithName"
        }

        func call(on api: API) throws -> EventLoopFuture<NoReturnValue> {
            api.add(
                flavorWithName: parameter0
            )
            .map { NoReturnValue() }
        }
    }

    private struct Call_delete_flavorWithID_UUID: APIMethodCall {
        typealias API = AlternativeIceCreamAPI
        typealias ReturnType = NoReturnValue

        static let methodID: APIMethodID = "delete(flavorWithID: UUID) -> Void"

        var parameter0: UUID

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithID"
        }

        func call(on api: API) throws -> EventLoopFuture<NoReturnValue> {
            api.delete(
                flavorWithID: parameter0
            )
            .map { NoReturnValue() }
        }
    }

}

