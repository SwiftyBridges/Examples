// Generated by SwiftyBridges. DO NOT MODIFY!

import Foundation
import SwiftyBridgesClient

/// Allows the user to log in and to register an account
class LoginAPI: SwiftyBridgesClient.API {

    func hello(_ name: String) async throws -> String {
        let call = Call_hello__String(
            parameter0: name
        )
        return try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }

    func registerUser(username: String, password: String, confirmPassword: String) async throws -> String {
        let call = Call_registerUser_username_String_password_String_confirmPassword_String(
            parameter0: username,
            parameter1: password,
            parameter2: confirmPassword
        )
        return try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }

    /// Allows the user to log in
    /// - Parameters:
    ///   - username: The username of the user
    ///   - password: The password of the user
    /// - Returns: A user token needed to perform subsequent API calls for this user
    func logIn(username: String, password: String) async throws -> String {
        let call = Call_logIn_username_String_password_String(
            parameter0: username,
            parameter1: password
        )
        return try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }
}

class IceCreamAPI: SwiftyBridgesClient.API {

    func getAllFlavors() async throws -> [IceCreamFlavor] {
        let call = Call_getAllFlavors_(
        )
        return try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }

    func add(flavorWithName flavorName: String) async throws -> Void {
        let call = Call_add_flavorWithName_String(
            parameter0: flavorName
        )
        _ = try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }

    func delete(flavorWithID flavorID: UUID) async throws -> Void {
        let call = Call_delete_flavorWithID_UUID(
            parameter0: flavorID
        )
        _ = try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }
}

class AlternativeIceCreamAPI: SwiftyBridgesClient.API {

    func getAllFlavors() async throws -> [IceCreamFlavor] {
        let call = Call_getAllFlavors_(
        )
        return try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }

    func add(flavorWithName flavorName: String) async throws -> Void {
        let call = Call_add_flavorWithName_String(
            parameter0: flavorName
        )
        _ = try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }

    func delete(flavorWithID flavorID: UUID) async throws -> Void {
        let call = Call_delete_flavorWithID_UUID(
            parameter0: flavorID
        )
        _ = try await SwiftyBridgesAPIHelper.performAPIMethodCall(api: self, call: call)
    }
}

extension LoginAPI {
    private struct Call_hello__String: APIMethodCall {
        typealias ReturnType = String

        static let typeName = "LoginAPI"
        static let methodID = "hello(_: String) -> String"

        var parameter0: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0"
        }

    }

    private struct Call_registerUser_username_String_password_String_confirmPassword_String: APIMethodCall {
        typealias ReturnType = String

        static let typeName = "LoginAPI"
        static let methodID = "registerUser(username: String, password: String, confirmPassword: String) -> String"

        var parameter0: String
        var parameter1: String
        var parameter2: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_username"
            case parameter1 = "1_password"
            case parameter2 = "2_confirmPassword"
        }

    }

    private struct Call_logIn_username_String_password_String: APIMethodCall {
        typealias ReturnType = String

        static let typeName = "LoginAPI"
        static let methodID = "logIn(username: String, password: String) -> String"

        var parameter0: String
        var parameter1: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_username"
            case parameter1 = "1_password"
        }

    }

}

extension IceCreamAPI {
    private struct Call_getAllFlavors_: APIMethodCall {
        typealias ReturnType = [IceCreamFlavor]

        static let typeName = "IceCreamAPI"
        static let methodID = "getAllFlavors() -> [IceCreamFlavor]"

    }

    private struct Call_add_flavorWithName_String: APIMethodCall {
        typealias ReturnType = NoReturnValue

        static let typeName = "IceCreamAPI"
        static let methodID = "add(flavorWithName: String) -> Void"

        var parameter0: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithName"
        }

    }

    private struct Call_delete_flavorWithID_UUID: APIMethodCall {
        typealias ReturnType = NoReturnValue

        static let typeName = "IceCreamAPI"
        static let methodID = "delete(flavorWithID: UUID) -> Void"

        var parameter0: UUID

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithID"
        }

    }

}

extension AlternativeIceCreamAPI {
    private struct Call_getAllFlavors_: APIMethodCall {
        typealias ReturnType = [IceCreamFlavor]

        static let typeName = "AlternativeIceCreamAPI"
        static let methodID = "getAllFlavors() -> [IceCreamFlavor]"

    }

    private struct Call_add_flavorWithName_String: APIMethodCall {
        typealias ReturnType = NoReturnValue

        static let typeName = "AlternativeIceCreamAPI"
        static let methodID = "add(flavorWithName: String) -> Void"

        var parameter0: String

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithName"
        }

    }

    private struct Call_delete_flavorWithID_UUID: APIMethodCall {
        typealias ReturnType = NoReturnValue

        static let typeName = "AlternativeIceCreamAPI"
        static let methodID = "delete(flavorWithID: UUID) -> Void"

        var parameter0: UUID

        enum CodingKeys: String, CodingKey {
            case parameter0 = "0_flavorWithID"
        }

    }

}

